package main
//有一个密钥字符串 S ，只包含字母，数字以及 '-'（破折号）。其中， N 个 '-' 将字符串分成了 N+1 组。
//
//给你一个数字 K，请你重新格式化字符串，除了第一个分组以外，每个分组要包含 K 个字符；而第一个分组中，至少要包含 1 个字符。两个分组之间需要用 '-'（破折号）隔开，并且将所有的小写字母转换为大写字母。
//
//给定非空字符串 S 和数字 K，按照上面描述的规则进行格式化。
//
// 
//
//示例 1：
//
//输入：S = "5F3Z-2e-9-w", K = 4
//输出："5F3Z-2E9W"
//解释：字符串 S 被分成了两个部分，每部分 4 个字符；
//     注意，两个额外的破折号需要删掉。
//示例 2：
//
//输入：S = "2-5g-3-J", K = 2
//输出："2-5G-3J"
//解释：字符串 S 被分成了 3 个部分，按照前面的规则描述，第一部分的字符可以少于给定的数量，其余部分皆为 2 个字符。
//
//
//个人思路；
//首选给的输入，最后结果肯定时可以格式化出来的话
//那就从后往前分组吧
//剩下的算法我是想不到了

func licenseKeyFormatting(S string, K int) string {
	slice := []rune(S)
	res := make([]rune, 0)
	k := 0
	for i:=len(slice)-1;i>=0;i--{
		v := slice[i]
		if v >= 97 {
			v -= 32 // 转大写
		}

		if v == '-' {
			continue
		}

		res = append([]rune{v}, res...)
		k++
		if k==K {
			res = append([]rune{'-'}, res)
			k = 0
		}
	}

	if len(res) == 0 {
		return ""
	}

	if res[0] == '-' {
		res = res[1:]
	}
	return string(res)
}
// 收获：大小写转换，从尾遍历，头插法，最后判断首位
