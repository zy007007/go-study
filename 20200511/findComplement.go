package main
//给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。
//
// 
//
//示例 1:
//
//输入: 5
//输出: 2
//解释: 5 的二进制表示为 101（没有前导零位），其补数为 010。所以你需要输出 2 。
//示例 2:
//
//输入: 1
//输出: 0
//解释: 1 的二进制表示为 1（没有前导零位），其补数为 0。所以你需要输出 0 。
//
//个人思路
//整数转二进制，用那个formatint(n, 2)吧
//然后要取反，遍历二进制字符串，新字符串，再从二进制转为十进制
//从二到十，怎么搞

import "fmt"

by comment 七昻七昻
func findComplement(num int) int {
	i := 1
	for i <= num {
		i <<= 1
	}
	return i - num - 1
}

func main() {
	fmt.Println("vim-go")
}
// 收获：这种题，不能再用字符串的思路想了，得看<<位运算了
