package main

//你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
//
//给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
//
//示例 1:
//
//输入: [1,2,3,1]
//输出: 4
//解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
//     偷窃到的最高金额 = 1 + 3 = 4 。
//示例 2:
//
//输入: [2,7,9,3,1]
//输出: 12
//解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
//     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

//个人思路
// 这题我读下来，感觉是求奇数偶数下标对应值的max?

// 好多评论都是动态规划，我就寻思真的是我智力有限吗
// 终于找到了一个提到奇数偶数的，而且关注到了核心的点，每次需要比较一下max
// 虽然我还没懂为什么要max一下
// 好像是因为存在2 1 1 2 这种，2+2是最大的情况

func rob(nums []int) int {
	sum1, sum2 := 0, 0
	for i := 0; i < len(nums); i++ {
		if i%2 == 0 {
			sum1 += nums[i]
			sum1 = max(sum1, sum2)
		} else {
			sum2 += nums[i]
			sum2 = max(sum1, sum2)
		}
	}
	return max(sum1, sum2)
}

func max(a, b int) int {
	if a >= b {
		return a
	} else {
		return b
	}
}
