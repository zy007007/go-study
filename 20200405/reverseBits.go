package main

//颠倒给定的 32 位无符号整数的二进制位。
//
//示例 1：
//
//输入: 00000010100101000001111010011100
//输出: 00111001011110000010100101000000
//解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
//      示例 2：
//
//      输入：11111111111111111111111111111101
//      输出：10111111111111111111111111111111
//      解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//            因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。

// 个人思路
// 快速的复习了一遍逆置
// 所以数字转字符串，字符串转数字，我记了多少？Atoi  Itoa?
// int, err = strconv.Atoi(string)
// string := strconv.Itoa(int)

func reverseBits(num uint32) uint32 {
	str := strconv.Itoa(num) // 结果 uint32 无法参入
	i, j := 0, len(str)-1

	for i < j {
		str[i], str[j] = str[j], str[i]
		i++
		j--
	}
	res, _ := strconv.Atoi(str)
	return res
}
